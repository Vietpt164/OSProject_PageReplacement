package algorithms;

import java.util.*;

import javafx.scene.layout.Pane;

public class FIFO {
	private static int[] pageReferences;
	private static int frameSize;
	private static Pane pane;
	private static int sequenceLength;
	
	
	
	

	public FIFO(int[] pageReferences, int frameSize, Pane pane) {
		super();
		this.pageReferences = pageReferences;
		this.frameSize = frameSize;
		this.sequenceLength = pageReferences.length;
	}

	static void pageFaults() {
		Queue<Integer> indexes = new LinkedList<>();

		int pageFaults = 0;
		
		for (int i = 0; i < sequenceLength; i++) {
    	   if (indexes.size() < sequenceLength) {
    		   if (!indexes.contains(pageReferences[i])) {
    			   indexes.add(pageReferences[i]);
    			   pageFaults++;
    		   }
    	   }
    	   else {
    		  if (!indexes.contains(pageReferences[i])) {
    			   int val = indexes.peek();
    			   indexes.poll();
    			   indexes.add(pageReferences[i]);
    			   pageFaults++;
    		  }
    	   }
		}

		System.out.println(pageFaults);
    }

	public static void main(String args[])
	{
		int pages[] = {7, 0, 1, 2, 1, 3, 0, 4, 2, 3, 0, 3, 2, 4, 6, 4};
        int capacity = 4;
        FIFO test = new FIFO(pages, capacity, null);
        test.pageFaults(pages, capacity, capacity);
	}
}

