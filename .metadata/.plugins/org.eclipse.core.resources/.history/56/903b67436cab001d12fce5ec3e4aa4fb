package algorithms;

import java.util.*;

import javafx.scene.layout.Pane;

public class FIFO {
	private int[] pageReferences;
	private int frameSize;
	private static Pane pane;
	private int PRLength;
	private Queue<Integer> PageFrame;
	
	
	
	

	public FIFO(int[] pageReferences, int frameSize, Pane pane) {
		super();
		this.pageReferences = pageReferences;
		this.frameSize = frameSize;
		this.PRLength = pageReferences.length;
		PageFrame = new LinkedList<>();

	}

	void pageFaults() {
		
		int pageFaults = 0;
		
		for (int i = 0; i < PRLength; i++) {
    	   if (PageFrame.size() < frameSize) {
    		   if (!PageFrame.contains(pageReferences[i])) {
    			   PageFrame.add(pageReferences[i]);
    			   pageFaults++;
    		   }
    	   }
    	   else {
    		  if (!PageFrame.contains(pageReferences[i])) {
    			   int val = PageFrame.peek();
    			   PageFrame.poll();
    			   PageFrame.add(pageReferences[i]);
    			   pageFaults++;
    		  }
    	   }
    	   System.out.println(PageFrame);
		}

		System.out.println(pageFaults);
    }

	public static void main(String args[])
	{
		int pages[] = {3, 2, 1, 0, 3, 2, 4, 3, 2, 1, 0, 4};
        int capacity = 3;
        FIFO test1 = new FIFO(pages, capacity, null);
        test1.pageFaults();
	}
}

